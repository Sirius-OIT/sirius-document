ソフトウェア_2023年度
==========

2023年度の目標・取り組み
------------
``先輩にインタビューして書く``

聞きたいことリスト
^^^^^^^^^^^^^^^
- STM32 Nucleoのプログラムの内容
    - 送受信データのフォーマット
    - モータ制御の計算の説明
    - 依存ライブラリの有無
    - 問題点
- ROS2とSTM32 Nucleoの通信方法
    - ecl_coreをいじっている？

構成
----------

+--------------+----------------+
| デバイス名     | デバイスの役割   |
+==============+================+
| PC           | ROS2           |
+--------------+----------------+
| STM32 Nucleo | モータ制御       |
+--------------+----------------+

PCでROS2を使って色々な計算をして，STM32 Nucleoにデータを送信する．

STM32 Nucleoについて
----------

PCからデータを受け取り，モータを制御する．

受信データのフォーマット
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: none
    
    {
        uint8 id,
        uint8 len,
        int16 linear.x,
        int16 angular.z,
    }

- id: ``1`` idに応じてデータの扱い方を変える
- len: ``4`` 以降のデータの長さ（バイト数）
- linear.x: ``-1200 ~ 1200`` 速度データ [mm/s] 
- angular.z: ``未明記`` 角速度データ [rad/s] 

| 速度，角速度のデータは16bitの整数値で表される．
| しかし，受信した際に8bitに分割されるので復元する必要がある．

分割された16bitデータのフォーマット
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: none

    data[0] : 速度データの上位8bit
    data[1] : 速度データの下位8bit
    data[2] : 角速度データの上位8bit
    data[3] : 角速度データの下位8bit


対向二輪型移動ロボットの計算
------------------------

速度データと角速度データを受け取り，左右のモータのPulse幅を計算する．

計算入力
^^^^^^^^
- 速度データ [mm/s] 
- 角速度データ [rad/s]

計算出力
^^^^^^^^
- 左モータのPulse幅
- 右モータのPulse幅

制約条件
^^^^^^^^
- 速度データの範囲: ``-1200 ~ 1200`` [mm/s]
- 角速度データの範囲: ``未明記`` [rad/s]
- 車輪間距離: ``485`` [mm]

計算方法
^^^^^^^^
以下の計算式を用いて，左右のモータの目標速度を求める．

.. math::

    \text{{左モータの目標速度}} = \text{{速度データ}} - \frac{{\text{{車輪間距離}}}}{2} \times \text{{角速度データ}}

    \text{{右モータの目標速度}} = \text{{速度データ}} + \frac{{\text{{車輪間距離}}}}{2} \times \text{{角速度データ}}


以下の手順に従い，左右のモータのPulse幅を計算する．

1. 左右のモータに取り付けたエンコーダーから単位時間あたりの回転数を取得し，角速度に変換する．
2. 車輪半径を使って角速度を速度に変換し，それを実速度とする．
3. 目標速度と実速度を比較する．
4. その誤差を埋める適当なゲインを見つけてPID制御で出力Pulse幅を計算する．

